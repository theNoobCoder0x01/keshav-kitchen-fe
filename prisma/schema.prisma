// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  kitchenId     String?
  kitchen       Kitchen?  @relation(fields: [kitchenId], references: [id])
  reports       Report[]
  menus         Menu[]
  recipes       Recipe[]

  @@index([kitchenId])
}

model Kitchen {
  id          String   @id @default(cuid())
  name        String
  location    String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
  menus       Menu[]
  reports     Report[]
  calendarEvents CalendarEvent[]
}

model Recipe {
  id           String       @id @default(cuid())
  name         String
  description  String?
  instructions String?
  servings     Int?
  category     String
  subcategory  String
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  ingredients  Ingredient[]
  menus        Menu[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([userId])
}

model Ingredient {
  id          String   @id @default(cuid())
  name        String
  quantity    Float
  unit        String
  costPerUnit Float?
  recipeId    String
  recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([recipeId])
}

model Menu {
  id          String           @id @default(cuid())
  date        DateTime
  mealType    MealType
  recipeId    String
  recipe      Recipe           @relation(fields: [recipeId], references: [id])
  kitchenId   String
  kitchen     Kitchen          @relation(fields: [kitchenId], references: [id])
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  servings    Int
  ghanFactor  Float            @default(1.0)
  status      Status           @default(PLANNED)
  actualCount Int?
  notes       String?
  ingredients MenuIngredient[] // Store ingredients separately for each menu
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([recipeId])
  @@index([kitchenId])
  @@index([userId])
}

model MenuIngredient {
  id          String   @id @default(cuid())
  name        String
  quantity    Float
  unit        String
  costPerUnit Float
  menuId      String
  menu        Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([menuId])
}

model Report {
  id          String   @id @default(cuid())
  date        DateTime
  kitchenId   String
  kitchen     Kitchen  @relation(fields: [kitchenId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  visitorCount Int
  mealsCounted Int
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([kitchenId])
  @@index([userId])
}

model CalendarEvent {
  id          String   @id @default(cuid())
  uid         String   @unique // ICS UID field
  summary     String
  description String?
  startDate   DateTime
  endDate     DateTime?
  location    String?
  url         String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([kitchenId])
  @@index([userId])
  @@index([startDate])
  @@index([uid])
}

enum Role {
  USER
  STAFF
  CHEF
  MANAGER
  ADMIN
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum Status {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
